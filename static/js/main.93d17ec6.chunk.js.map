{"version":3,"sources":["components/ClientInformation.tsx","components/ProductCard.tsx","components/Products.tsx","components/Cart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ClientInformationComponent","filters","setFilters","setOrganicPreference","organicPreference","addToFilters","filter","includes","f","Col","className","Row","Form","Group","controlId","Check","defaultChecked","onClick","type","label","evt","name","ProductCardComponent","p","cart","inCart","useState","itemInCart","setItemInCart","Card","Body","Title","Text","price","Button","variant","pdt","idx","findIndex","splice","push","addToCart","ProductsComponent","products","console","log","filteredProducts","prod","containsNuts","containsLactose","organic","dairyProducts","section","meatProducts","seaProducts","fruitProducts","vegetableProducts","snackProducts","Accordion","defaultActiveKey","Header","Toggle","as","eventKey","Collapse","length","sort","a","b","map","i","ProductCard","CartComponent","Table","reduce","toFixed","App","id","Navbar","bg","Brand","color","size","NavDropdown","title","Item","to","Divider","Nav","Link","path","ClientInformation","Products","Cart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93d17ec6.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\n\r\ninterface ClientInformationComponentProps {\r\n    setFilters: Function;\r\n    setOrganicPreference: Function;\r\n    filters: string[];\r\n    organicPreference: boolean;\r\n}\r\n\r\nconst ClientInformationComponent: React.FC<ClientInformationComponentProps> = ({filters, setFilters, setOrganicPreference, organicPreference}) => {\r\n\r\n    const addToFilters = (filter: string) => {\r\n        if (!filters.includes(filter)) {\r\n            setFilters([...filters, filter])\r\n        } else {\r\n            setFilters(filters.filter((f) => f !== filter));\r\n        }\r\n    }\r\n    return (\r\n    <Col className=\"mt-3 ml-3\">\r\n        <Row>\r\n            <h3>Informations Personelles</h3>\r\n        </Row>\r\n        <br/>\r\n        <Row>\r\n            <h4>Votre information est requise pour améliorer votre expérience sur <b>ÉpicerieExpress.com</b>.</h4>\r\n        </Row>\r\n        <br/>\r\n        <Row>\r\n            <h5 className=\"mt-1\">Intolérances/Allergies alimentaires:</h5>\r\n        </Row>\r\n        <Row>\r\n            <Form.Group controlId=\"lactoseIntolerance\">\r\n                <Form.Check defaultChecked={filters.includes(\"lactoseIntolerance\")} onClick={() => addToFilters(\"lactoseIntolerance\")} type=\"checkbox\" label=\"Intolérance au lactose\" />\r\n            </Form.Group>\r\n        </Row>\r\n        <Row>\r\n            <Form.Group controlId=\"nutsAllergy\">\r\n                <Form.Check defaultChecked={filters.includes(\"nutsAllergy\")} onClick={(evt: any) => addToFilters(\"nutsAllergy\")} type=\"checkbox\" label=\"Allergique aux noix\" />\r\n            </Form.Group>\r\n        </Row>\r\n        <Row>\r\n            <h5 className=\"mt-1\">Je préfère les produits:</h5>\r\n        </Row>\r\n        <Row>\r\n            <Form.Group controlId=\"organic\">\r\n                <Form.Check\r\n                type=\"radio\"\r\n                label=\"Produits Organiques\"\r\n                name=\"organicPreference\"\r\n                defaultChecked={organicPreference}\r\n                onClick={() => setOrganicPreference(true)}\r\n                />\r\n                <Form.Check\r\n                type=\"radio\"\r\n                label=\"Pas de préférence\"\r\n                name=\"organicPreference\"\r\n                defaultChecked={!organicPreference}\r\n                onClick={() => setOrganicPreference(false)}\r\n                />\r\n            </Form.Group>\r\n        </Row>\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default ClientInformationComponent;","import React, { useEffect, useState } from 'react';\r\nimport { Button, Card} from 'react-bootstrap';\r\nimport { Product } from '../App';\r\n\r\ninterface ProductCardComponentProps {\r\n    p: Product;\r\n    cart: Product[];\r\n\r\n}\r\n\r\nconst ProductCardComponent: React.FC<ProductCardComponentProps> = ({p, cart}) => {\r\n\r\n    const addToCart = (pdt: Product) => {\r\n        if (!cart.includes(pdt)) {\r\n            cart.push(pdt);\r\n        } else {\r\n            const idx = cart.findIndex(p => p.name === pdt.name);\r\n            cart.splice(idx, 1);\r\n        }\r\n    }\r\n\r\n    const inCart = () => {\r\n        return cart.includes(p)\r\n    }\r\n\r\n    const [itemInCart, setItemInCart] = useState<boolean>(inCart());\r\n\r\n    return (\r\n        <Card className=\"text-center\">\r\n            <Card.Body>\r\n                <Card.Title>{p.name}</Card.Title>\r\n                <Card.Text>\r\n                Prix : {p.price}$\r\n                </Card.Text>\r\n                <Button variant=\"primary\" onClick={() => {addToCart(p); setItemInCart(inCart())}}>{!itemInCart ? \"Ajouter au panier\" : \"Supprimer du panier\"}</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ProductCardComponent;","import React from 'react';\r\nimport { Accordion, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { Product } from '../App';\r\nimport ProductCardComponent from './ProductCard';\r\n\r\ninterface ProductsComponentProps {\r\n    products: Product[];\r\n    cart: Product[];\r\n    filters: string[];\r\n    organicPreference: boolean;\r\n}\r\n\r\nconst ProductsComponent: React.FC<ProductsComponentProps> = ({products, cart, filters, organicPreference}) => {\r\n    console.log(filters)\r\n    console.log(organicPreference)\r\n\r\n    const filteredProducts = products.filter(prod => {\r\n        if (filters.includes(\"nutsAllergy\") && filters.includes(\"lactoseIntolerance\")) {\r\n            return !prod.containsNuts && !prod.containsLactose\r\n        } else if (filters.includes(\"lactoseIntolerance\")) {\r\n            return !prod.containsLactose\r\n        } else if (filters.includes(\"nutsAllergy\")) {\r\n            return !prod.containsNuts\r\n        } else {\r\n            return true\r\n        }\r\n    }).filter(prod => {\r\n        if (organicPreference) {\r\n            return prod.organic\r\n        } else {\r\n            return true;\r\n        }\r\n    })\r\n\r\n    const dairyProducts = filteredProducts.filter((p: Product) => p.section === \"dairy\");\r\n    const meatProducts = filteredProducts.filter((p: Product) => p.section === \"meat\");\r\n    const seaProducts = filteredProducts.filter((p: Product) => p.section === \"seafood\");\r\n    const fruitProducts = filteredProducts.filter((p: Product) => p.section === \"fruit\");\r\n    const vegetableProducts = filteredProducts.filter((p: Product) => p.section === \"vegetable\");\r\n    const snackProducts = filteredProducts.filter((p: Product) => p.section === \"snack\");\r\n\r\n    return (\r\n        \r\n        <Col className=\"mt-3 ml-3\">\r\n            <Row>\r\n                <h3>Produits</h3>\r\n            </Row>\r\n\r\n            <Accordion defaultActiveKey=\"0\">\r\n                <Card>\r\n                    <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                        Produits Laitiers\r\n                    </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>\r\n                        {dairyProducts.length === 0 ? \r\n                        <h5>Aucun produit disponible dans cette section.\r\n                        Veuillez modifier vos critères de recherche.</h5> : \r\n                        dairyProducts.sort((a,b) => a.price - b.price).map((p:Product, i:number) => {\r\n                            if (i % 3 === 0) {\r\n                                return (\r\n                                    <Row className=\"my-3\">\r\n                                        <Col>\r\n                                            <ProductCardComponent p={p} cart={cart} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {dairyProducts[i+1] ? \r\n                                            <ProductCardComponent p={dairyProducts[i + 1]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {dairyProducts[i+2] ? \r\n                                            <ProductCardComponent p={dairyProducts[i + 2]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            } else {\r\n                                return <></>\r\n                            }\r\n                            \r\n                        })}\r\n                    </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                        Viande\r\n                    </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"1\">\r\n                    <Card.Body>\r\n                        {meatProducts.length === 0 ? \r\n                            <h5>Aucun produit disponible dans cette section.\r\n                            Veuillez modifier vos critères de recherche.</h5> : \r\n                            meatProducts.sort((a,b) => a.price - b.price).map((p:Product, i:number) => {\r\n                            if (i % 3 === 0) {\r\n                                return (\r\n                                    <Row className=\"my-3\">\r\n                                        <Col>\r\n                                            <ProductCardComponent p={p} cart={cart} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {meatProducts[i+1] ? \r\n                                            <ProductCardComponent p={meatProducts[i + 1]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {meatProducts[i+2] ? \r\n                                            <ProductCardComponent p={meatProducts[i + 2]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            } else {\r\n                                return <></>\r\n                            }\r\n                            \r\n                        })}\r\n                    </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\r\n                        Fruits de mer\r\n                    </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"2\">\r\n                    <Card.Body>\r\n                        {seaProducts.length === 0 ? \r\n                            <h5>Aucun produit disponible dans cette section.\r\n                            Veuillez modifier vos critères de recherche.</h5> : \r\n                            seaProducts.sort((a,b) => a.price - b.price).map((p:Product, i:number) => {\r\n                            if (i % 3 === 0) {\r\n                                return (\r\n                                    <Row className=\"my-3\">\r\n                                        <Col>\r\n                                            <ProductCardComponent p={p} cart={cart} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {seaProducts[i+1] ? \r\n                                            <ProductCardComponent p={seaProducts[i + 1]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {seaProducts[i+2] ? \r\n                                            <ProductCardComponent p={seaProducts[i + 2]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            } else {\r\n                                return <></>\r\n                            }\r\n                            \r\n                        })}\r\n                    </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\">\r\n                        Fruits\r\n                    </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"3\">\r\n                    <Card.Body>\r\n                        {fruitProducts.length === 0 ? \r\n                            <h5>Aucun produit disponible dans cette section.\r\n                            Veuillez modifier vos critères de recherche.</h5> : \r\n                            fruitProducts.sort((a,b) => a.price - b.price).map((p:Product, i:number) => {\r\n                            if (i % 3 === 0) {\r\n                                return (\r\n                                    <Row className=\"my-3\">\r\n                                        <Col>\r\n                                            <ProductCardComponent p={p} cart={cart} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {fruitProducts[i+1] ? \r\n                                            <ProductCardComponent p={fruitProducts[i + 1]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {fruitProducts[i+2] ? \r\n                                            <ProductCardComponent p={fruitProducts[i + 2]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            } else {\r\n                                return <></>\r\n                            }\r\n                            \r\n                        })}\r\n                    </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\">\r\n                        Légumes\r\n                    </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"4\">\r\n                    <Card.Body>\r\n                        {vegetableProducts.length === 0 ? \r\n                            <h5>Aucun produit disponible dans cette section.\r\n                            Veuillez modifier vos critères de recherche.</h5> : \r\n                            vegetableProducts.sort((a,b) => a.price - b.price).map((p:Product, i:number) => {\r\n                            if (i % 3 === 0) {\r\n                                return (\r\n                                    <Row className=\"my-3\">\r\n                                        <Col>\r\n                                            <ProductCardComponent p={p} cart={cart} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {vegetableProducts[i+1] ? \r\n                                            <ProductCardComponent p={vegetableProducts[i + 1]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {vegetableProducts[i+2] ? \r\n                                            <ProductCardComponent p={vegetableProducts[i + 2]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            } else {\r\n                                return <></>\r\n                            }\r\n                            \r\n                        })}\r\n                    </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"5\">\r\n                        Collations\r\n                    </Accordion.Toggle>\r\n                    </Card.Header>\r\n                    <Accordion.Collapse eventKey=\"5\">\r\n                    <Card.Body>\r\n                        {snackProducts.length === 0 ? \r\n                            <h5>Aucun produit disponible dans cette section.\r\n                            Veuillez modifier vos critères de recherche.</h5> : \r\n                            snackProducts.sort((a,b) => a.price - b.price).map((p:Product, i:number) => {\r\n                            if (i % 3 === 0) {\r\n                                return (\r\n                                    <Row className=\"my-3\">\r\n                                        <Col>\r\n                                            <ProductCardComponent p={p} cart={cart} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {snackProducts[i+1] ? \r\n                                            <ProductCardComponent p={snackProducts[i + 1]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                        <Col>\r\n                                        {snackProducts[i+2] ? \r\n                                            <ProductCardComponent p={snackProducts[i + 2]} cart={cart} />\r\n                                        : null}\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            } else {\r\n                                return <></>\r\n                            }\r\n                            \r\n                        })}\r\n                    </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            </Accordion>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default ProductsComponent;","import React from 'react';\r\nimport { Col, Row, Table } from 'react-bootstrap';\r\nimport { Product } from '../App';\r\n\r\ninterface CartComponentProps {\r\n    cart: Product[];\r\n}\r\n\r\nconst CartComponent: React.FC<CartComponentProps> = ({cart}) => {\r\n\r\n  return (\r\n    <Col className=\"mt-3 ml-3\">\r\n        <Row>\r\n            <h3>Panier</h3>\r\n        </Row>\r\n        <br/>\r\n\r\n        <Table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Nom du produit</th>\r\n                    <th>Prix</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {cart.map(p => {\r\n                    return (<tr>\r\n                        <td>{p.name}</td>\r\n                        <td>{p.price}$</td>\r\n                    </tr>)\r\n                })}\r\n            </tbody>\r\n        </Table>\r\n        \r\n        <Row>\r\n            <h3>Prix total: {cart.reduce((a, b) => a + b.price, 0).toFixed(2)}$</h3>\r\n        </Row>\r\n    </Col>\r\n  );\r\n}\r\n\r\nexport default CartComponent;\r\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport ClientInformationComponent from './components/ClientInformation';\nimport ProductsComponent from './components/Products';\nimport Cart from './components/Cart';\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport { FaOpencart } from \"react-icons/fa\"\nimport { BsFillPersonFill } from \"react-icons/bs\"\nimport { BiCartAlt } from \"react-icons/bi\"\nimport { GiFruitBowl } from \"react-icons/gi\"\nimport { Link } from 'react-router-dom';\n\ninterface AppProps {\n}\n\nexport interface Product {\n  id: number;\n  name: string;\n  price: number;\n  containsNuts: boolean;\n  containsLactose: boolean;\n  organic: boolean;\n  section: string;\n}\n\n\n\nconst App: React.FC<AppProps> = () => {\n\n  const [products, setProducts] = useState<Product[]>([\n    {\n        id: 0,\n        name: \"Yaourt\",\n        price: 5.79,\n        containsNuts: false,\n        containsLactose: true,\n        organic: true,\n        section: \"dairy\"\n    },\n    {\n        id: 1,\n        name: \"Boeuf haché\",\n        price: 7.29,\n        containsNuts: false,\n        containsLactose: false,\n        organic: false,\n        section: \"meat\"\n    },\n    {\n        id: 2,\n        name: \"Saumon\",\n        price: 12.99,\n        containsNuts: false,\n        containsLactose: false,\n        organic: true,\n        section: \"seafood\"\n    },\n    {\n        id: 3,\n        name: \"Pomme\",\n        price: 1.05,\n        containsNuts: false,\n        containsLactose: false,\n        organic: true,\n        section: \"fruit\"\n    },\n    {\n        id: 4,\n        name: \"Banane\",\n        price: 2.19,\n        containsNuts: false,\n        containsLactose: false,\n        organic: true,\n        section: \"fruit\"\n    },\n    {\n        id: 5,\n        name: \"Lait\",\n        price: 3.99,\n        containsNuts: false,\n        containsLactose: true,\n        organic: true,\n        section: \"dairy\"\n    },\n    {\n        id: 6,\n        name: \"Barre de chocolat\",\n        price: 3.05,\n        containsNuts: true,\n        containsLactose: true,\n        organic: false,\n        section: \"snack\"\n    },\n    {\n        id: 7,\n        name: \"Biscuit aux pépites de chocolat\",\n        price: 7.99,\n        containsNuts: true,\n        containsLactose: true,\n        organic: false,\n        section: \"snack\"\n    },\n    {\n        id: 8,\n        name: \"Mélange de noix\",\n        price: 5.99,\n        containsNuts: true,\n        containsLactose: false,\n        organic: true,\n        section: \"snack\"\n    },\n    {\n        id: 9,\n        name: \"Smoothie\",\n        price: 3.99,\n        containsNuts: false,\n        containsLactose: true,\n        organic: false,\n        section: \"dairy\"\n    },\n    {\n      id: 10,\n      name: \"Crevettes\",\n      price: 13.99,\n      containsNuts: false,\n      containsLactose: false,\n      organic: true,\n      section: \"seafood\"\n    },\n    {\n      id: 11,\n      name: \"Crabe\",\n      price: 17.99,\n      containsNuts: false,\n      containsLactose: false,\n      organic: true,\n      section: \"seafood\"\n    },\n    {\n      id: 12,\n      name: \"Poulet entier\",\n      price: 11.99,\n      containsNuts: false,\n      containsLactose: false,\n      organic: false,\n      section: \"meat\"\n    },\n    {\n      id: 13,\n      name: \"Brocoli\",\n      price: 5.99,\n      containsNuts: false,\n      containsLactose: false,\n      organic: true,\n      section: \"vegetable\"\n    },\n    {\n      id: 14,\n      name: \"Piment vert\",\n      price: 3.99,\n      containsNuts: false,\n      containsLactose: false,\n      organic: true,\n      section: \"vegetable\"\n    },\n    {\n      id: 15,\n      name: \"Oignon\",\n      price: 2.99,\n      containsNuts: false,\n      containsLactose: false,\n      organic: true,\n      section: \"vegetable\"\n    }\n  ])\n  \n  const [cart, setCart] = useState<Product[]>([]);\n  const [filters, setFilters] = useState<string[]>([] as string[]);\n  const [organicPreference, setOrganicPreference] = useState<boolean>(false);\n\n  return (\n    <BrowserRouter>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>\n          <FaOpencart/>{' '}\n          Épicerie Express\n        </Navbar.Brand>\n        <BsFillPersonFill color=\"white\" size={24}/>\n        <NavDropdown title=\"Informations personnelles\" id=\"foodPreferences\">\n          <NavDropdown.Item><Link className=\"dropdown-link\" to=\"/SEG3525LabModule3/personalInfo/foodPreferences\" >Préférences alimentaires</Link></NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item>Information de livraison</NavDropdown.Item>\n          <NavDropdown.Item>Information de paiement</NavDropdown.Item>\n        </NavDropdown>\n        <GiFruitBowl color=\"white\" size={24} />\n        <NavDropdown title=\"Épicerie en ligne\" id=\"onlineStore\">\n          <NavDropdown.Item><Link className=\"dropdown-link\" to=\"/SEG3525LabModule3/onlineStore/products\" >Produits</Link></NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item>Livraison à domicile</NavDropdown.Item>\n          <NavDropdown.Item>Nous joindre</NavDropdown.Item>\n        </NavDropdown>\n        <Nav.Link><BiCartAlt color=\"white\" size={24}/><Link className=\"cart-link\" to=\"/SEG3525LabModule3/cart\">Panier</Link></Nav.Link>\n      </Navbar>\n      <Switch>\n        <Route path=\"/SEG3525LabModule3/personalInfo/foodPreferences\">\n          <ClientInformationComponent organicPreference={organicPreference} filters={filters} setFilters={setFilters} setOrganicPreference={setOrganicPreference} />\n        </Route>\n        <Route path=\"/SEG3525LabModule3/onlineStore/products\">\n          <ProductsComponent organicPreference={organicPreference} products={products} cart={cart} filters={filters}/>\n        </Route>\n        <Route path=\"/SEG3525LabModule3/cart\">\n          <Cart cart={cart} />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <footer className=\"footer\">\n      <div className=\"container\">\n        <span className=\"text-muted\">Site Web conçu par Sébastien Coll</span>\n      </div>\n    </footer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}